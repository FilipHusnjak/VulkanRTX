#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#include "raycommon.glsl"
#include "random.glsl"

layout(location = 0) rayPayloadNV hitPayload prd;

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;

layout(binding = 0, set = 1, scalar) uniform CameraProperties
{
    vec3 cameraPos;
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
}
cam;

layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(push_constant) uniform Constants
{
    vec4 clearColor;
    vec3 lightPosition;
    float lightIntensity;
    int lightType;
    int nSamples;
}
pushC;

void main() 
{
    for(int smpl = 0; smpl < pushC.nSamples; smpl++)
    {
        // Initialize the random number
        uint seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, smpl);
        float r1 = rnd(seed);
        float r2 = rnd(seed);
        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide antialiasing.
        vec2 subpixel_jitter = smpl == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + subpixel_jitter;
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
        vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

        uint  rayFlags = gl_RayFlagsOpaqueNV;
        float tMin     = 0.001;
        float tMax     = 10000.0;

        prd.depth = 0;
        prd.hitValue = vec3(0);
        prd.attenuation = vec3(1.f, 1.f, 1.f);
        vec3 hitValue = vec3(0);
        traceNV(topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                origin.xyz, // ray origin
                tMin,              // ray min range
                direction.xyz,    // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
        );
        if (smpl == 0)
        {
            imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(prd.hitValue, 1.f));
        }
        else
        {
            float a = 1.0f / float(smpl + 1);
            vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDNV.xy)).xyz;
            imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(mix(old_color, prd.hitValue, a), 1.f));
        }
    }
}